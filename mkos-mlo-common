#!/bin/bash
set -e -u

# Creates a small SD card image for platforms that use MLO.
#
# For reference, this script creates a disk image similar to what you
# would get with the following commands:
#
#   sudo dd if=/dev/zero of=${DEFAULT_IMAGE} bs=1M count=${DEFAULT_SIZE}
#   sudo sfdisk --in-order --Linux --unit M ${DEFAULT_IMAGE} <<-__EOF__
#   1,48,0xE,*
#   ,,,-
#   __EOF__
#

do_cat_config=0
do_save_tgz=0

# sensible defaults
DEFAULT_IMAGE=ptux.img
DEFAULT_ROOTFSTYPE=ext4
DEFAULT_DEVICE=""
DEFAULT_CONFIG=""
DEFAULT_CODENAME="unstable"
DEFAULT_FSSIZEMB=1024
DEFAULT_PART1SIZE=352816

USAGE="${0##./} [-C] [-z] [-c <config-file>] [-d <size-mb>] [-p <package-name>] [-D <codename>]
  Options:
    -C            print default config template to stdout and exit
    -c <config>   use file <config> as alternate config template
    -d <size>     use <size> (in MB) for the filesystem image
    -n <image>    use <image> as the output image filename
    -p <package>  use <package> as the base package name
    -z            include ptux.tgz in output filesystem image
    -D <codename> use <codename> instead of ${DEFAULT_CODENAME}

  Environment:
    The command line takes precedence over the environment.
    MKOS_CONFIG    - multistrap configuration
    MKOS_PACKAGE   - root package
    MKOS_FSSIZEMB  - default filesystem size (in MB)
    MKOS_CODENAME  - distribution codename"

fatal () {
	echo "$@" >&2
	exit 1
}

# note: we do all this mkos/default/var assignment in so many intermediate
# steps so that users can provide values via MKOS_* environment variables, or
# (in some cases) as command-line parameters; we also try to derive the tar and
# manifest filenames from the image filename, once we know it.
#
# there may be a less-verbose way, but this works well enough for now
#
: ${ROOTFSTYPE:=${MKOS_ROOTFSTYPE:-$DEFAULT_ROOTFSTYPE}}
: ${DEVICE:=${MKOS_DEVICE:-$DEFAULT_DEVICE}}
: ${IMAGE:=${MKOS_IMAGE:-$DEFAULT_IMAGE}}
: ${CONFIG:=${MKOS_CONFIG:-$DEFAULT_CONFIG}}
: ${SIZE:=${MKOS_FSSIZEMB:-$DEFAULT_FSSIZEMB}}
: ${CODENAME:=${MKOS_CODENAME:-$DEFAULT_CODENAME}}
PART1SIZE=${DEFAULT_PART1SIZE}

while [ "$#" != 0 ]
do
	case "$1,${2-}" in
		-p,?*)
			DEVICE="$2"
			shift
			shift
			;;
		-c,?*)
			CONFIG="$2"
			shift
			shift
			;;
		-C,*)
			do_cat_config=1
			shift
			;;
		-d,?*|--filesystem-size,?*)
			SIZE="$2"
			shift
			shift
			;;
		-D,*)
			CODENAME="$2"
			shift
			shift
			;;
		-n,?*|--image-name,?*)
			IMAGE="$2"
			shift
			shift
			;;
		-f,?*)
			ROOTFSTYPE="$2"
			shift
			shift
			;;
		-z,*)
			do_save_tgz=1
			shift
			;;
		-h,*|--help,*)
			man ${0##*/}
			exit
			;;
		-*)
			fatal "$USAGE"
			;;
		*)
			if [ -z "${DEVICE:-}" ]; then
				DEVICE="$1"
				shift
			else
				fatal "$USAGE"
			fi
			;;
	esac
done

if [ $do_cat_config -ge 1 ] ; then
    cat ${CONFIG}
    exit
fi

test -n "$DEVICE" || fatal "$USAGE"
test -n "$CONFIG" || fatal "$USAGE"
test -r $CONFIG || fatal cannot read $CONFIG
test -n "$IMAGE" || fatal "$USAGE"
test -n "$ROOTFSTYPE" || fatal "$USAGE"


# TODO: it'd be nice if SIZE could use "M", etc. to express units
#       (truncate can deal with the M, but sfdisk can't)
SIZE=`echo ${SIZE}*1024*1024 | bc`

TARFILE=${IMAGE%img}tgz
MANIFESTFILE=${IMAGE%img}manifest

test ! -e $IMAGE || fatal "refusing to overwrite $IMAGE"
test ! -e $TARFILE || fatal "refusing to overwrite $TARFILE"
test ! -e $MANIFESTFILE || fatal "refusing to overwrite $MANIFESTFILE"

cleanup () {
	rm -rf $TEMPCONFIG $TEMPMOUNT $IMAGE $TARFILE $MANIFESTFILE
}
trap "cleanup; exit" INT TERM EXIT

TEMPCONFIG=$(mktemp --tmpdir mkos-${DEVICE}.mstrap.XXXXXXXX)
sed -e "s/{{device-package}}/$DEVICE/" $CONFIG \
    | sed -e "s/{{dist-codename}}/$CODENAME/" >$TEMPCONFIG
TEMPMOUNT=$(mktemp -d --tmpdir mkos-${DEVICE}.mount.XXXXXXXX)

GUESTFISH=/usr/bin/guestfish
MULTISTRAP=/usr/sbin/multistrap
SFDISK=/sbin/sfdisk

# build the filesystem directory
$MULTISTRAP -f $TEMPCONFIG -d $TEMPMOUNT

echo "Creating ${TARFILE}..."
tar czf $TARFILE -C $TEMPMOUNT .
if [ $do_save_tgz -ge 1 ] ; then
    cp $TARFILE $TEMPMOUNT/root
fi

echo "Creating ${MANIFESTFILE}..."
dpkg --root=$TEMPMOUNT -l > $MANIFESTFILE

echo "Creating ${IMAGE}..."
truncate --size=$SIZE $IMAGE

{ echo ,$PART1SIZE,0xc,*; echo ,,,-; } \
    | $SFDISK $IMAGE 2>&1 > /dev/null

$GUESTFISH -a $IMAGE 2>&1 > /dev/null <<__EOF__
run
list-partitions
mkfs-opts vfat /dev/sda1
mkfs-opts $ROOTFSTYPE /dev/sda2
mount /dev/sda2 /
mkdir /boot
lcd $TEMPMOUNT/boot
copy-in . /boot
lcd $TEMPMOUNT
mount /dev/sda1 /boot
copy-in . /
__EOF__


# don't blow away the tmp files unless
# we're running standalone (i.e. not just
# helping another script that sourced us)
if [[ $0 == *"mkos-mlo-common"* ]]
then
    rm -r $TEMPMOUNT
    rm $TEMPCONFIG
fi

trap - INT TERM EXIT
